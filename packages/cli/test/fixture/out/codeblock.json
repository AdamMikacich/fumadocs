{
  "name": "codeblock",
  "files": [
    {
      "imports": {
        "@/utils/cn": "lib:cn.ts",
        "@/components/ui/scroll-area": "components:ui/scroll-area.tsx",
        "@/utils/use-copy-button": "lib:use-copy-button.ts",
        "@/components/ui/button": "components:ui/button.tsx"
      },
      "content": "'use client';\nimport { Check, Copy } from 'lucide-react';\nimport {\n  type ButtonHTMLAttributes,\n  type HTMLAttributes,\n  type ReactElement,\n  type ReactNode,\n  forwardRef,\n  useCallback,\n  useRef,\n} from 'react';\nimport { cn } from '@/utils/cn';\nimport {\n  ScrollArea,\n  ScrollBar,\n  ScrollViewport,\n} from '@/components/ui/scroll-area';\nimport { useCopyButton } from '@/utils/use-copy-button';\nimport { buttonVariants } from '@/components/ui/button';\n\nexport type CodeBlockProps = HTMLAttributes<HTMLElement> & {\n  /**\n   * Icon of code block\n   *\n   * When passed as a string, it assumes the value is the HTML of icon\n   */\n  icon?: ReactNode;\n\n  /**\n   * Allow to copy code with copy button\n   *\n   * @defaultValue true\n   */\n  allowCopy?: boolean;\n\n  /**\n   * Keep original background color generated by Shiki or Rehype Code\n   *\n   * @defaultValue false\n   */\n  keepBackground?: boolean;\n};\n\nexport const Pre = forwardRef<HTMLPreElement, HTMLAttributes<HTMLPreElement>>(\n  ({ className, ...props }, ref) => {\n    return (\n      <pre ref={ref} className={cn('max-h-[400px] p-4', className)} {...props}>\n        {props.children}\n      </pre>\n    );\n  },\n);\n\nPre.displayName = 'Pre';\n\nexport const CodeBlock = forwardRef<HTMLElement, CodeBlockProps>(\n  (\n    {\n      title,\n      allowCopy = true,\n      keepBackground = false,\n      icon,\n      className,\n      ...props\n    },\n    ref,\n  ) => {\n    const areaRef = useRef<HTMLDivElement>(null);\n    const onCopy = useCallback(() => {\n      const pre = areaRef.current?.getElementsByTagName('pre').item(0);\n\n      if (!pre) return;\n\n      const clone = pre.cloneNode(true) as HTMLElement;\n      clone.querySelectorAll('.nd-copy-ignore').forEach((node) => {\n        node.remove();\n      });\n\n      void navigator.clipboard.writeText(clone.textContent ?? '');\n    }, []);\n\n    return (\n      <figure\n        ref={ref}\n        className={cn(\n          'not-prose group fd-codeblock relative my-6 overflow-hidden rounded-lg border bg-fd-secondary/50 text-sm',\n          keepBackground && 'fd-codeblock-keep-bg',\n          className,\n        )}\n        {...props}\n      >\n        {title ? (\n          <div className=\"flex flex-row items-center gap-2 border-b bg-fd-muted px-4 py-1.5\">\n            {icon ? (\n              <div\n                className=\"text-fd-muted-foreground [&_svg]:size-3.5\"\n                {...(typeof icon === 'string'\n                  ? {\n                      dangerouslySetInnerHTML: { __html: icon },\n                    }\n                  : {\n                      children: icon,\n                    })}\n              />\n            ) : null}\n            <figcaption className=\"flex-1 truncate text-fd-muted-foreground\">\n              {title}\n            </figcaption>\n            {allowCopy ? (\n              <CopyButton className=\"-me-2\" onCopy={onCopy} />\n            ) : null}\n          </div>\n        ) : (\n          allowCopy && (\n            <CopyButton\n              className=\"absolute right-2 top-2 z-[2] backdrop-blur-sm\"\n              onCopy={onCopy}\n            />\n          )\n        )}\n        <ScrollArea ref={areaRef} dir=\"ltr\">\n          <ScrollViewport>{props.children}</ScrollViewport>\n          <ScrollBar orientation=\"horizontal\" />\n        </ScrollArea>\n      </figure>\n    );\n  },\n);\n\nCodeBlock.displayName = 'CodeBlock';\n\nfunction CopyButton({\n  className,\n  onCopy,\n  ...props\n}: ButtonHTMLAttributes<HTMLButtonElement> & {\n  onCopy: () => void;\n}): ReactElement {\n  const [checked, onClick] = useCopyButton(onCopy);\n\n  return (\n    <button\n      type=\"button\"\n      className={cn(\n        buttonVariants({\n          color: 'ghost',\n          className: 'transition-all group-hover:opacity-100',\n        }),\n        !checked && 'opacity-0',\n        className,\n      )}\n      aria-label=\"Copy Text\"\n      onClick={onClick}\n      {...props}\n    >\n      <Check\n        className={cn('size-3.5 transition-transform', !checked && 'scale-0')}\n      />\n      <Copy\n        className={cn(\n          'absolute size-3.5 transition-transform',\n          checked && 'scale-0',\n        )}\n      />\n    </button>\n  );\n}\n",
      "path": "components:codeblock.tsx"
    },
    {
      "imports": {},
      "content": "export { twMerge as cn } from 'tailwind-merge';\n",
      "path": "lib:cn.ts"
    },
    {
      "imports": {
        "@/utils/cn": "lib:cn.ts"
      },
      "content": "import * as ScrollAreaPrimitive from '@radix-ui/react-scroll-area';\nimport * as React from 'react';\nimport { cn } from '@/utils/cn';\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn('overflow-hidden', className)}\n    {...props}\n  >\n    {children}\n    <ScrollAreaPrimitive.Corner />\n    <ScrollBar orientation=\"vertical\" />\n  </ScrollAreaPrimitive.Root>\n));\n\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName;\n\nconst ScrollViewport = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Viewport>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Viewport\n    ref={ref}\n    className={cn('size-full rounded-[inherit]', className)}\n    {...props}\n  >\n    {children}\n  </ScrollAreaPrimitive.Viewport>\n));\n\nScrollViewport.displayName = ScrollAreaPrimitive.Viewport.displayName;\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Scrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Scrollbar>\n>(({ className, orientation = 'vertical', ...props }, ref) => (\n  <ScrollAreaPrimitive.Scrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      'flex select-none data-[state=hidden]:animate-fd-fade-out',\n      orientation === 'vertical' && 'h-full w-1.5',\n      orientation === 'horizontal' && 'h-1.5 flex-col',\n      className,\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-fd-border\" />\n  </ScrollAreaPrimitive.Scrollbar>\n));\nScrollBar.displayName = ScrollAreaPrimitive.Scrollbar.displayName;\n\nexport { ScrollArea, ScrollBar, ScrollViewport };\n",
      "path": "components:ui/scroll-area.tsx"
    },
    {
      "imports": {},
      "content": "import {\n  useState,\n  useRef,\n  useEffect,\n  useCallback,\n  type MouseEventHandler,\n} from 'react';\n\nexport function useCopyButton(\n  onCopy: () => void,\n): [checked: boolean, onClick: MouseEventHandler] {\n  const [checked, setChecked] = useState(false);\n  const timeoutRef = useRef<number | null>(null);\n\n  const onClick: MouseEventHandler = useCallback(() => {\n    if (timeoutRef.current) window.clearTimeout(timeoutRef.current);\n    timeoutRef.current = window.setTimeout(() => {\n      setChecked(false);\n    }, 1500);\n    onCopy();\n    setChecked(true);\n  }, [onCopy]);\n\n  // Avoid updates after being unmounted\n  useEffect(() => {\n    return () => {\n      if (timeoutRef.current) window.clearTimeout(timeoutRef.current);\n    };\n  }, []);\n\n  return [checked, onClick];\n}\n",
      "path": "lib:use-copy-button.ts"
    }
  ],
  "devDependencies": {
    "lucide-react": "^0.447.0"
  },
  "dependencies": {
    "react": "",
    "tailwind-merge": "^2.5.2",
    "@radix-ui/react-scroll-area": "^1.2.0"
  },
  "subComponents": [
    "button"
  ]
}