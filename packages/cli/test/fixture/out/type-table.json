{
  "name": "type-table",
  "files": [
    {
      "imports": {
        "@/utils/cn": "lib:cn.ts",
        "@/components/ui/popover": "components:ui/popover.tsx"
      },
      "content": "'use client';\n\nimport { InfoIcon } from 'lucide-react';\nimport Link from 'next/link';\nimport { cva } from 'class-variance-authority';\nimport { cn } from '@/utils/cn';\nimport {\n  Popover,\n  PopoverContent,\n  PopoverTrigger,\n} from '@/components/ui/popover';\n\nexport function Info({\n  children,\n}: {\n  children: React.ReactNode;\n}): React.ReactElement {\n  return (\n    <Popover>\n      <PopoverTrigger>\n        <InfoIcon className=\"size-4\" />\n      </PopoverTrigger>\n      <PopoverContent className=\"prose max-w-[500px] text-sm\">\n        {children}\n      </PopoverContent>\n    </Popover>\n  );\n}\n\ninterface ObjectType {\n  /**\n   * Additional description of the field\n   */\n  description?: React.ReactNode;\n  type: string;\n  typeDescription?: string;\n  /**\n   * Optional link to the type\n   */\n  typeDescriptionLink?: string;\n  default?: string;\n}\n\nconst th = cva('p-2 font-medium first:pl-0 last:pr-0');\nconst td = cva('p-2 first:pl-0 last:pr-0');\nconst field = cva('inline-flex flex-row items-center gap-1');\nconst code = cva(\n  'rounded-md bg-fd-secondary p-1 text-fd-secondary-foreground',\n  {\n    variants: {\n      color: { primary: 'bg-fd-primary/10 text-fd-primary' },\n    },\n  },\n);\n\nexport function TypeTable({\n  type,\n}: {\n  type: Record<string, ObjectType>;\n}): React.ReactElement {\n  return (\n    <div className=\"not-prose overflow-auto whitespace-nowrap\">\n      <table className=\"my-4 w-full text-left text-sm text-fd-muted-foreground\">\n        <thead className=\"border-b\">\n          <tr>\n            <th className={cn(th(), 'w-[45%]')}>Prop</th>\n            <th className={cn(th(), 'w-[30%]')}>Type</th>\n            <th className={cn(th(), 'w-1/4')}>Default</th>\n          </tr>\n        </thead>\n        <tbody className=\"border-collapse divide-y divide-fd-border\">\n          {Object.entries(type).map(([key, value]) => (\n            <tr key={key}>\n              <td className={td()}>\n                <div className={field()}>\n                  <code className={cn(code({ color: 'primary' }))}>{key}</code>\n                  {value.description ? <Info>{value.description}</Info> : null}\n                </div>\n              </td>\n              <td className={td()}>\n                <div className={field()}>\n                  <code className={code()}>{value.type}</code>\n                  {value.typeDescription ? (\n                    <Info>\n                      <pre className=\"overflow-auto bg-fd-secondary text-fd-secondary-foreground\">\n                        {value.typeDescription}\n                      </pre>\n                    </Info>\n                  ) : null}\n                  {value.typeDescriptionLink ? (\n                    <Link href={value.typeDescriptionLink}>\n                      <InfoIcon className=\"size-4\" />\n                    </Link>\n                  ) : null}\n                </div>\n              </td>\n              <td className={td()}>\n                {value.default ? (\n                  <code className={code()}>{value.default}</code>\n                ) : (\n                  <span>-</span>\n                )}\n              </td>\n            </tr>\n          ))}\n        </tbody>\n      </table>\n    </div>\n  );\n}\n",
      "path": "components:type-table.tsx"
    },
    {
      "imports": {},
      "content": "export { twMerge as cn } from 'tailwind-merge';\n",
      "path": "lib:cn.ts"
    },
    {
      "imports": {
        "@/utils/cn": "lib:cn.ts"
      },
      "content": "import * as PopoverPrimitive from '@radix-ui/react-popover';\nimport * as React from 'react';\nimport { cn } from '@/utils/cn';\n\nconst Popover = PopoverPrimitive.Root;\n\nconst PopoverTrigger = PopoverPrimitive.Trigger;\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = 'center', sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      side=\"bottom\"\n      className={cn(\n        'z-50 min-w-[220px] max-w-[98vw] rounded-lg border bg-fd-popover p-2 text-sm text-fd-popover-foreground shadow-md focus-visible:outline-none data-[state=closed]:animate-fd-popover-out data-[state=open]:animate-fd-popover-in',\n        className,\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n));\nPopoverContent.displayName = PopoverPrimitive.Content.displayName;\n\nconst PopoverClose = PopoverPrimitive.PopoverClose;\n\nexport { Popover, PopoverTrigger, PopoverContent, PopoverClose };\n",
      "path": "components:ui/popover.tsx"
    }
  ],
  "devDependencies": {
    "lucide-react": "^0.446.0"
  },
  "dependencies": {
    "next": "",
    "class-variance-authority": "^0.7.0",
    "tailwind-merge": "^2.5.2",
    "@radix-ui/react-popover": "^1.1.2",
    "react": ""
  },
  "subComponents": []
}