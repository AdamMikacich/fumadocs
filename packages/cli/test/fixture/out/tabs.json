{
  "name": "tabs",
  "files": [
    {
      "imports": {
        "@/utils/cn": "lib:cn.ts",
        "./ui/tabs": "components:ui/tabs.tsx"
      },
      "content": "'use client';\n\nimport type {\n  TabsContentProps,\n  TabsProps as BaseProps,\n} from '@radix-ui/react-tabs';\nimport { useMemo, useState, useCallback, useLayoutEffect } from 'react';\nimport { cn } from '@/utils/cn';\nimport * as Primitive from './ui/tabs';\n\nexport * as Primitive from './ui/tabs';\n\ntype ChangeListener = (v: string) => void;\nconst listeners = new Map<string, ChangeListener[]>();\n\nfunction addChangeListener(id: string, listener: ChangeListener): void {\n  const list = listeners.get(id) ?? [];\n  list.push(listener);\n  listeners.set(id, list);\n}\n\nfunction removeChangeListener(id: string, listener: ChangeListener): void {\n  const list = listeners.get(id) ?? [];\n  listeners.set(\n    id,\n    list.filter((item) => item !== listener),\n  );\n}\n\nfunction update(id: string, v: string, persist: boolean): void {\n  listeners.get(id)?.forEach((item) => {\n    item(v);\n  });\n\n  if (persist) localStorage.setItem(id, v);\n  else sessionStorage.setItem(id, v);\n}\n\nexport interface TabsProps extends BaseProps {\n  /**\n   * Identifier for Sharing value of tabs\n   */\n  groupId?: string;\n\n  /**\n   * Enable persistent\n   */\n  persist?: boolean;\n  /**\n   * @defaultValue 0\n   */\n  defaultIndex?: number;\n\n  items?: string[];\n}\n\nexport function Tabs({\n  groupId,\n  items = [],\n  persist = false,\n  defaultIndex = 0,\n  ...props\n}: TabsProps): React.ReactElement {\n  const values = useMemo(() => items.map((item) => toValue(item)), [items]);\n  const [value, setValue] = useState(values[defaultIndex]);\n\n  useLayoutEffect(() => {\n    if (!groupId) return;\n\n    const onUpdate: ChangeListener = (v) => {\n      if (values.includes(v)) setValue(v);\n    };\n\n    const previous = persist\n      ? localStorage.getItem(groupId)\n      : sessionStorage.getItem(groupId);\n\n    if (previous) onUpdate(previous);\n    addChangeListener(groupId, onUpdate);\n    return () => {\n      removeChangeListener(groupId, onUpdate);\n    };\n  }, [groupId, persist, values]);\n\n  const onValueChange = useCallback(\n    (v: string) => {\n      if (groupId) {\n        update(groupId, v, persist);\n      } else {\n        setValue(v);\n      }\n    },\n    [groupId, persist],\n  );\n\n  return (\n    <Primitive.Tabs\n      value={value}\n      onValueChange={onValueChange}\n      {...props}\n      className={cn('my-4', props.className)}\n    >\n      <Primitive.TabsList>\n        {values.map((v, i) => (\n          <Primitive.TabsTrigger key={v} value={v}>\n            {items[i]}\n          </Primitive.TabsTrigger>\n        ))}\n      </Primitive.TabsList>\n      {props.children}\n    </Primitive.Tabs>\n  );\n}\n\nfunction toValue(v: string): string {\n  return v.toLowerCase().replace(/\\s/, '-');\n}\n\nexport function Tab({\n  value,\n  className,\n  ...props\n}: TabsContentProps): React.ReactElement {\n  return (\n    <Primitive.TabsContent\n      value={toValue(value)}\n      className={cn(\n        'prose-no-margin [&>figure:only-child]:-m-4 [&>figure:only-child]:rounded-none [&>figure:only-child]:border-none',\n        className,\n      )}\n      {...props}\n    />\n  );\n}\n",
      "path": "components:tabs.tsx"
    },
    {
      "imports": {},
      "content": "export { twMerge as cn } from 'tailwind-merge';\n",
      "path": "lib:cn.ts"
    },
    {
      "imports": {
        "@/utils/cn": "lib:cn.ts"
      },
      "content": "import * as TabsPrimitive from '@radix-ui/react-tabs';\nimport * as React from 'react';\nimport { cn } from '@/utils/cn';\n\nconst Tabs = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Root>\n>((props, ref) => {\n  return (\n    <TabsPrimitive.Root\n      ref={ref}\n      {...props}\n      className={cn(\n        'flex flex-col overflow-hidden rounded-xl border bg-fd-card',\n        props.className,\n      )}\n    />\n  );\n});\n\nTabs.displayName = 'Tabs';\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>((props, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    {...props}\n    className={cn(\n      'flex flex-row items-end gap-4 overflow-x-auto bg-fd-secondary px-4 text-fd-muted-foreground',\n      props.className,\n    )}\n  />\n));\nTabsList.displayName = 'TabsList';\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>((props, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    {...props}\n    className={cn(\n      'whitespace-nowrap border-b border-transparent py-2 text-sm font-medium transition-colors hover:text-fd-accent-foreground disabled:pointer-events-none disabled:opacity-50 data-[state=active]:border-fd-primary data-[state=active]:text-fd-primary',\n      props.className,\n    )}\n  />\n));\nTabsTrigger.displayName = 'TabsTrigger';\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>((props, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    {...props}\n    className={cn('p-4', props.className)}\n  />\n));\nTabsContent.displayName = 'TabsContent';\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent };\n",
      "path": "components:ui/tabs.tsx"
    }
  ],
  "subComponents": [],
  "dependencies": {
    "@radix-ui/react-tabs": "^1.1.1",
    "react": "",
    "tailwind-merge": "^2.5.2"
  },
  "devDependencies": {}
}