{
  "name": "layout/root-toggle",
  "files": [
    {
      "imports": {
        "@/utils/cn": "lib:cn.ts",
        "@/utils/shared": "lib:shared.ts",
        "../ui/popover": "components:ui/popover.tsx"
      },
      "content": "'use client';\nimport { ChevronDown } from 'lucide-react';\nimport { type HTMLAttributes, type ReactNode, useMemo, useState } from 'react';\nimport Link from 'next/link';\nimport { usePathname } from 'next/navigation';\nimport { cn } from '@/utils/cn';\nimport { isActive } from '@/utils/shared';\nimport { useSidebar } from 'fumadocs-ui/provider';\nimport { Popover, PopoverContent, PopoverTrigger } from '../ui/popover';\n\nexport interface Option {\n  /**\n   * Redirect URL of the folder, usually the index page\n   */\n  url: string;\n\n  icon?: ReactNode;\n  title: ReactNode;\n  description?: ReactNode;\n\n  props?: HTMLAttributes<HTMLElement>;\n}\n\nexport function RootToggle({\n  options,\n  ...props\n}: {\n  options: Option[];\n} & HTMLAttributes<HTMLButtonElement>): React.ReactElement {\n  const [open, setOpen] = useState(false);\n  const { closeOnRedirect } = useSidebar();\n  const pathname = usePathname();\n  const selected = useMemo(() => {\n    return options.find((item) => isActive(item.url, pathname, true));\n  }, [options, pathname]);\n\n  const onClick = (): void => {\n    closeOnRedirect.current = false;\n    setOpen(false);\n  };\n\n  return (\n    <Popover open={open} onOpenChange={setOpen}>\n      <PopoverTrigger\n        {...props}\n        className={cn(\n          '-mx-1 flex flex-row items-center gap-2.5 rounded-lg p-1 hover:bg-fd-accent/50 hover:text-fd-accent-foreground',\n          props.className,\n        )}\n      >\n        {selected ? <Item {...selected} /> : null}\n\n        <ChevronDown className=\"size-4 text-fd-muted-foreground md:me-1.5\" />\n      </PopoverTrigger>\n      <PopoverContent className=\"w-[var(--radix-popover-trigger-width)] overflow-hidden p-0\">\n        {options.map((item) => (\n          <Link\n            key={item.url}\n            href={item.url}\n            onClick={onClick}\n            {...item.props}\n            className={cn(\n              'flex w-full flex-row items-center gap-2.5 p-1.5',\n              selected === item\n                ? 'bg-fd-accent text-fd-accent-foreground'\n                : 'hover:bg-fd-accent/50',\n              item.props?.className,\n            )}\n          >\n            <Item {...item} />\n          </Link>\n        ))}\n      </PopoverContent>\n    </Popover>\n  );\n}\n\nfunction Item(props: Option): React.ReactElement {\n  return (\n    <>\n      {props.icon}\n      <div className=\"flex-1 text-left\">\n        <p className=\"text-sm font-medium\">{props.title}</p>\n        {props.description ? (\n          <p className=\"text-xs text-fd-muted-foreground\">\n            {props.description}\n          </p>\n        ) : null}\n      </div>\n    </>\n  );\n}\n",
      "path": "components:layout/root-toggle.tsx"
    },
    {
      "imports": {},
      "content": "export { twMerge as cn } from 'tailwind-merge';\n",
      "path": "lib:cn.ts"
    },
    {
      "imports": {},
      "content": "import type { PageTree } from 'fumadocs-core/server';\nimport type { ReactNode } from 'react';\n\nexport function isActive(\n  url: string,\n  pathname: string,\n  nested = true,\n): boolean {\n  return url === pathname || (nested && pathname.startsWith(`${url}/`));\n}\n\nexport function replaceOrDefault(\n  obj:\n    | {\n        enabled?: boolean;\n        component?: ReactNode;\n      }\n    | undefined,\n  def: ReactNode,\n): ReactNode {\n  if (obj?.enabled === false) return;\n  if (obj?.component !== undefined) return obj.component;\n\n  return def;\n}\n\nexport function hasActive(items: PageTree.Node[], url: string): boolean {\n  return items.some((item) => {\n    if (item.type === 'page') {\n      return item.url === url;\n    }\n\n    if (item.type === 'folder')\n      return item.index?.url === url || hasActive(item.children, url);\n\n    return false;\n  });\n}\n",
      "path": "lib:shared.ts"
    },
    {
      "imports": {
        "@/utils/cn": "lib:cn.ts"
      },
      "content": "import * as PopoverPrimitive from '@radix-ui/react-popover';\nimport * as React from 'react';\nimport { cn } from '@/utils/cn';\n\nconst Popover = PopoverPrimitive.Root;\n\nconst PopoverTrigger = PopoverPrimitive.Trigger;\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = 'center', sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      side=\"bottom\"\n      className={cn(\n        'z-50 min-w-[220px] max-w-[98vw] rounded-lg border bg-fd-popover p-2 text-sm text-fd-popover-foreground shadow-md focus-visible:outline-none data-[state=closed]:animate-fd-popover-out data-[state=open]:animate-fd-popover-in',\n        className,\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n));\nPopoverContent.displayName = PopoverPrimitive.Content.displayName;\n\nconst PopoverClose = PopoverPrimitive.PopoverClose;\n\nexport { Popover, PopoverTrigger, PopoverContent, PopoverClose };\n",
      "path": "components:ui/popover.tsx"
    }
  ],
  "subComponents": [],
  "dependencies": {
    "react": "",
    "next": "",
    "tailwind-merge": "^2.5.2",
    "fumadocs-core": "",
    "fumadocs-ui": "",
    "@radix-ui/react-popover": "^1.1.2"
  },
  "devDependencies": {
    "lucide-react": "^0.447.0"
  }
}