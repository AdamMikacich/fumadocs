{
  "name": "search-ai",
  "files": [
    {
      "imports": {
        "@/utils/cn": "lib:cn.ts",
        "../../../../packages/ui/src/components/ui/button": "components:ui/button.tsx",
        "./markdown-processor": "components:ai/markdown-processor.ts"
      },
      "content": "'use client';\nimport type { AnswerSession, Message } from '@oramacloud/client';\nimport {\n  type ButtonHTMLAttributes,\n  type HTMLAttributes,\n  memo,\n  type ReactNode,\n  type TextareaHTMLAttributes,\n  useCallback,\n  useEffect,\n  useRef,\n  useState,\n} from 'react';\nimport {\n  Dialog,\n  DialogClose,\n  DialogContent,\n  DialogDescription,\n  DialogOverlay,\n  DialogPortal,\n  DialogTitle,\n  DialogTrigger,\n} from '@radix-ui/react-dialog';\nimport { Info, Loader2, RefreshCw, Send, X } from 'lucide-react';\nimport defaultMdxComponents from 'fumadocs-ui/mdx';\nimport { cn } from '@/utils/cn';\nimport { buttonVariants } from '../../../../packages/ui/src/components/ui/button';\nimport type { Processor } from './markdown-processor';\n\ntype RelatedQueryListener = (queries: string[]) => void;\ntype MessageChangeListener = (messages: Message[]) => void;\ntype MessageLoadingListener = (isLoading: boolean) => void;\nlet relatedQueryListeners: RelatedQueryListener[] = [];\nlet messageListeners: MessageChangeListener[] = [];\nlet messageLoadingListeners: MessageLoadingListener[] = [];\n\nconst context =\n  'The user is a web developer who knows some Next.js and React.js, but is new to Fumadocs.';\nconst endpoint = process.env.NEXT_PUBLIC_ORAMA_ENDPOINT;\nconst apiKey = process.env.NEXT_PUBLIC_ORAMA_API_KEY;\n\nexport async function createClient(): Promise<AnswerSession> {\n  const { OramaClient } = await import('@oramacloud/client');\n  if (!endpoint || !apiKey) throw new Error('Failed to find api keys');\n\n  const client = new OramaClient({\n    endpoint,\n    api_key: apiKey,\n  });\n\n  const instance = client.createAnswerSession({\n    userContext: context,\n    events: {\n      onRelatedQueries(params) {\n        relatedQueryListeners.forEach((l) => {\n          l(params);\n        });\n      },\n      onStateChange() {\n        messageListeners.forEach((l) => {\n          l(instance.getMessages());\n        });\n      },\n      onMessageLoading(isLoading) {\n        messageLoadingListeners.forEach((l) => {\n          l(isLoading);\n        });\n      },\n    },\n    inferenceType: 'documentation',\n  });\n\n  return instance;\n}\n\nlet session: AnswerSession | undefined;\n\nexport function AIDialog(): React.ReactElement {\n  const [message, setMessage] = useState('');\n  const [loading, setLoading] = useState(false);\n  // eslint-disable-next-line react/hook-use-state -- rerender\n  const [_, update] = useState<unknown>();\n  const shouldFocus = useRef(false); // should focus on input on next render\n  const [relatedQueries, setRelatedQueries] = useState<string[]>([]);\n\n  useEffect(() => {\n    // preload processor\n    void import('./markdown-processor');\n\n    if (!session) {\n      void createClient().then((res) => {\n        session = res;\n      });\n    }\n\n    const onRelatedQuery: RelatedQueryListener = (params) => {\n      setRelatedQueries(params);\n    };\n\n    const onMessageChange: MessageChangeListener = () => {\n      update({});\n    };\n\n    const onMessageLoading: MessageLoadingListener = (value) => {\n      setLoading(value);\n      if (!value) {\n        shouldFocus.current = true;\n      }\n    };\n\n    messageListeners.push(onMessageChange);\n    relatedQueryListeners.push(onRelatedQuery);\n    messageLoadingListeners.push(onMessageLoading);\n\n    return () => {\n      messageListeners = messageListeners.filter((l) => l !== onMessageChange);\n      relatedQueryListeners = relatedQueryListeners.filter(\n        (l) => l !== onRelatedQuery,\n      );\n      messageLoadingListeners = messageLoadingListeners.filter(\n        (l) => l !== onMessageLoading,\n      );\n    };\n  }, []);\n\n  const onStart = useCallback(\n    (e?: React.FormEvent) => {\n      e?.preventDefault();\n      if (!session || message.length === 0) return;\n\n      void session.ask({\n        term: message,\n        related: {\n          howMany: 3,\n          format: 'query',\n        },\n      });\n\n      setMessage('');\n    },\n    [message],\n  );\n\n  const onTry = useCallback(() => {\n    if (!session) return;\n\n    void session.regenerateLast({ stream: false });\n  }, []);\n\n  const onClear = useCallback(() => {\n    session?.clearSession();\n    update({});\n    shouldFocus.current = true;\n  }, []);\n\n  useEffect(() => {\n    if (shouldFocus.current) {\n      document.getElementById('nd-ai-input')?.focus();\n      shouldFocus.current = false;\n    }\n  });\n\n  const messages = session?.getMessages() ?? [];\n\n  return (\n    <>\n      <List className={cn(messages.length === 0 && 'hidden')}>\n        {messages.map((item, i) => (\n          // eslint-disable-next-line react/no-array-index-key -- safe\n          <Message key={i} {...item}>\n            {!loading &&\n            item.role === 'assistant' &&\n            i === messages.length - 1 ? (\n              <div className=\"mt-2 flex flex-row items-center gap-2\">\n                <button\n                  type=\"button\"\n                  className={cn(\n                    buttonVariants({\n                      color: 'secondary',\n                      className: 'gap-1.5',\n                    }),\n                  )}\n                  onClick={onTry}\n                >\n                  <RefreshCw className=\"size-4\" />\n                  Retry\n                </button>\n                <button\n                  type=\"button\"\n                  className={cn(\n                    buttonVariants({\n                      color: 'ghost',\n                    }),\n                  )}\n                  onClick={onClear}\n                >\n                  Clear Messages\n                </button>\n              </div>\n            ) : null}\n          </Message>\n        ))}\n      </List>\n      {loading ? (\n        <button\n          type=\"button\"\n          className={cn(\n            buttonVariants({\n              color: 'secondary',\n              className: 'rounded-full mx-auto my-1',\n            }),\n          )}\n          onClick={() => {\n            session?.abortAnswer();\n          }}\n        >\n          Abort Answer\n        </button>\n      ) : null}\n      {relatedQueries.length > 0 ? (\n        <div className=\"flex shrink-0 flex-row items-center gap-1 overflow-x-auto p-2\">\n          {relatedQueries.map((item) => (\n            <button\n              key={item}\n              type=\"button\"\n              className={cn(\n                buttonVariants({\n                  color: 'secondary',\n                  className: 'py-1 text-nowrap',\n                }),\n              )}\n              onClick={() => {\n                shouldFocus.current = true;\n                setMessage(item);\n              }}\n            >\n              {item}\n            </button>\n          ))}\n        </div>\n      ) : null}\n      <form\n        className={cn(\n          'flex flex-row rounded-b-lg border-t pe-2 transition-colors',\n          loading && 'bg-fd-muted',\n        )}\n        onSubmit={onStart}\n      >\n        <Input\n          value={message}\n          placeholder={loading ? 'AI is answering...' : 'Ask AI something'}\n          disabled={loading}\n          onChange={(e) => {\n            setMessage(e.target.value);\n          }}\n          onKeyDown={(event) => {\n            if (!event.shiftKey && event.key === 'Enter') {\n              onStart();\n              event.preventDefault();\n            }\n          }}\n        />\n        {loading ? (\n          <Loader2 className=\"mt-2 size-5 animate-spin text-fd-muted-foreground\" />\n        ) : (\n          <button\n            type=\"submit\"\n            className={cn(\n              buttonVariants({\n                size: 'sm',\n                color: 'ghost',\n                className: 'rounded-full p-1',\n              }),\n            )}\n            disabled={message.length === 0}\n          >\n            <Send className=\"size-4\" />\n          </button>\n        )}\n      </form>\n    </>\n  );\n}\n\nfunction List(props: HTMLAttributes<HTMLDivElement>): React.ReactElement {\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  useEffect(() => {\n    if (!containerRef.current) return;\n\n    const observer = new ResizeObserver(() => {\n      const container = containerRef.current;\n      if (!container) return;\n\n      container.scrollTo({\n        top: container.scrollHeight,\n        behavior: 'instant',\n      });\n    });\n\n    containerRef.current.scrollTop =\n      containerRef.current.scrollHeight - containerRef.current.clientHeight;\n\n    // after animation\n    setTimeout(() => {\n      const element = containerRef.current?.firstElementChild;\n\n      if (element) {\n        observer.observe(element);\n      }\n    }, 2000);\n\n    return () => {\n      observer.disconnect();\n    };\n  }, []);\n\n  return (\n    <div\n      {...props}\n      ref={containerRef}\n      className={cn('min-h-0 flex-1 overflow-auto px-2 pb-2', props.className)}\n    >\n      <div className=\"flex flex-col gap-1\">{props.children}</div>\n    </div>\n  );\n}\n\nfunction Input(\n  props: TextareaHTMLAttributes<HTMLTextAreaElement>,\n): React.ReactElement {\n  const ref = useRef<HTMLDivElement>(null);\n  const shared = cn('col-start-1 row-start-1 max-h-60 min-h-12 px-3 py-1.5');\n\n  return (\n    <div className=\"grid flex-1\">\n      <textarea\n        id=\"nd-ai-input\"\n        className={cn(\n          shared,\n          'resize-none bg-transparent placeholder:text-fd-muted-foreground focus-visible:outline-none',\n        )}\n        {...props}\n      />\n      <div ref={ref} className={cn(shared, 'invisible whitespace-pre-wrap')}>\n        {`${props.value?.toString() ?? ''}\\n`}\n      </div>\n    </div>\n  );\n}\n\nlet processor: Processor | undefined;\nconst map = new Map<string, ReactNode>();\n\nconst Message = memo(\n  ({ children, ...message }: Message & { children: ReactNode }) => {\n    const [rendered, setRendered] = useState<ReactNode>(\n      map.get(message.content) ?? message.content,\n    );\n\n    useEffect(() => {\n      const run = async (): Promise<void> => {\n        const { createProcessor } = await import('./markdown-processor');\n\n        processor ??= createProcessor();\n        const result = await processor.process(\n          message.content,\n          // @ts-expect-error -- avoid conflicts between JSX types and React types\n          {\n            ...defaultMdxComponents,\n            img: undefined, // use JSX\n          },\n        );\n\n        map.set(message.content, result);\n        setRendered(result);\n      };\n\n      void run();\n    }, [message.content]);\n\n    return (\n      <div\n        className={cn(\n          'rounded-lg border bg-fd-card px-2 py-1.5 text-fd-card-foreground',\n          message.role === 'user' &&\n            'bg-fd-secondary text-fd-secondary-foreground',\n        )}\n      >\n        <p\n          className={cn(\n            'mb-1 text-xs font-medium text-fd-muted-foreground',\n            message.role === 'assistant' && 'text-fd-primary',\n          )}\n        >\n          {message.role}\n        </p>\n        <div className=\"prose text-sm\">{rendered}</div>\n        {children}\n      </div>\n    );\n  },\n);\n\nMessage.displayName = 'Message';\n\nexport function Trigger(\n  props: ButtonHTMLAttributes<HTMLButtonElement>,\n): React.ReactElement {\n  return (\n    <Dialog>\n      <DialogTrigger {...props} />\n      <DialogPortal>\n        <DialogOverlay className=\"fixed inset-0 z-50 bg-fd-background/50 backdrop-blur-sm data-[state=closed]:animate-fd-fade-out data-[state=open]:animate-fd-fade-in\" />\n        <DialogContent\n          onOpenAutoFocus={(e) => {\n            document.getElementById('nd-ai-input')?.focus();\n            e.preventDefault();\n          }}\n          className=\"fixed left-1/2 z-50 my-[5vh] flex max-h-[90dvh] w-[98vw] max-w-[860px] origin-left -translate-x-1/2 flex-col rounded-lg border bg-fd-popover text-fd-popover-foreground shadow-lg focus-visible:outline-none data-[state=closed]:animate-fd-dialog-out data-[state=open]:animate-fd-dialog-in\"\n        >\n          <DialogTitle className=\"sr-only\">Search AI</DialogTitle>\n          <DialogDescription className=\"sr-only\">\n            Ask AI some questions.\n          </DialogDescription>\n          <DialogClose\n            aria-label=\"Close Dialog\"\n            tabIndex={-1}\n            className={cn(\n              'absolute right-1 top-1 rounded-full bg-fd-muted p-1 text-fd-muted-foreground hover:bg-fd-accent hover:text-fd-accent-foreground',\n            )}\n          >\n            <X className=\"size-4\" />\n          </DialogClose>\n          <p className=\"inline-flex items-center gap-0.5 p-2 text-xs text-fd-muted-foreground\">\n            <Info className=\"inline size-5 shrink-0 fill-blue-500 text-fd-popover\" />\n            <span>\n              Answers from AI may be inaccurate, please verify the information.\n            </span>\n          </p>\n          <AIDialog />\n        </DialogContent>\n      </DialogPortal>\n    </Dialog>\n  );\n}\n",
      "path": "components:ai/search-ai.tsx"
    },
    {
      "imports": {},
      "content": "export { twMerge as cn } from 'tailwind-merge';\n",
      "path": "lib:cn.ts"
    },
    {
      "imports": {},
      "content": "import { remark } from 'remark';\nimport remarkGfm from 'remark-gfm';\nimport remarkRehype from 'remark-rehype';\nimport remarkMath from 'remark-math';\nimport rehypeKatex from 'rehype-katex';\nimport rehypeShiki, { type RehypeShikiOptions } from '@shikijs/rehype';\nimport {\n  type Components,\n  type Jsx,\n  toJsxRuntime,\n} from 'hast-util-to-jsx-runtime';\nimport { type ReactNode } from 'react';\nimport { Fragment, jsx, jsxs } from 'react/jsx-runtime';\n\ninterface MetaValue {\n  name: string;\n  regex: RegExp;\n}\n\n/**\n * Custom meta string values\n */\nconst metaValues: MetaValue[] = [\n  {\n    name: 'title',\n    regex: /title=\"(?<value>[^\"]*)\"/,\n  },\n];\n\nexport interface Processor {\n  process: (\n    content: string,\n    components: Partial<Components>,\n  ) => Promise<ReactNode>;\n}\n\nexport function createProcessor(): Processor {\n  function filterMetaString(meta: string): string {\n    let replaced = meta;\n    for (const value of metaValues) {\n      replaced = replaced.replace(value.regex, '');\n    }\n\n    return replaced;\n  }\n\n  const processor = remark()\n    .use(remarkGfm)\n    .use(remarkMath)\n    .use(remarkRehype)\n    .use(rehypeKatex)\n    .use(rehypeShiki, {\n      defaultLanguage: 'text',\n      defaultColor: false,\n      themes: {\n        light: 'vitesse-light',\n        dark: 'vitesse-dark',\n      },\n      lazy: true,\n      parseMetaString(meta) {\n        const map: Record<string, string> = {};\n\n        for (const value of metaValues) {\n          const result = value.regex.exec(meta);\n\n          if (result) {\n            map[value.name] = result[1];\n          }\n        }\n\n        return map;\n      },\n      transformers: [\n        {\n          name: 'rehype-code:pre-process',\n          preprocess(code, { meta }) {\n            if (meta) {\n              meta.__raw = filterMetaString(meta.__raw ?? '');\n            }\n\n            // Remove empty line at end\n            return code.replace(/\\n$/, '');\n          },\n          line(hast) {\n            if (hast.children.length === 0) {\n              // Keep the empty lines when using grid layout\n              hast.children.push({\n                type: 'text',\n                value: ' ',\n              });\n            }\n          },\n        },\n      ],\n    } satisfies RehypeShikiOptions);\n\n  return {\n    async process(content, components) {\n      const nodes = processor.parse({ value: content });\n      const hast = await processor.run(nodes);\n      return toJsxRuntime(hast, {\n        development: false,\n        jsx: jsx as Jsx,\n        jsxs: jsxs as Jsx,\n        Fragment,\n        components,\n      });\n    },\n  };\n}\n",
      "path": "components:ai/markdown-processor.ts"
    }
  ],
  "subComponents": [
    "button"
  ],
  "dependencies": {
    "@oramacloud/client": "^1.3.16",
    "react": "",
    "@radix-ui/react-dialog": "^1.1.2",
    "lucide-react": "^0.447.0",
    "fumadocs-ui": "",
    "tailwind-merge": "^2.5.2",
    "remark": "^15.0.1",
    "remark-gfm": "^4.0.0",
    "remark-rehype": "^11.1.1",
    "remark-math": "^6.0.0",
    "rehype-katex": "^7.0.1",
    "@shikijs/rehype": "^1.21.0",
    "hast-util-to-jsx-runtime": "^2.3.0"
  },
  "devDependencies": {}
}